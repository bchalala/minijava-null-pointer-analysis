//
// Generated by JTB 1.3.2
//

import syntaxtree.*;
import visitor.*;
import java.util.*;

public class ClassMethodVisitor extends GJVoidDepthFirst<StringPair> {

   public ClassHierarchyAnalysis cha = new ClassHierarchyAnalysis();
   public HashMap<String, Set<String>> classFields = new HashMap<String, Set<String>>();
   public HashMap<StringPair, Set<String>> methodVariables = new HashMap<StringPair, Set<String>>();
   public HashMap<StringPair, List<String>> methodArguments = new HashMap<StringPair, List<String>>();

   private boolean shouldAdd = false;
   private String tInfo = "";
   private boolean ismvar = false;

   private List<String> curMArgs;

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> ( VarDeclaration() )*
    * f15 -> ( Statement() )*
    * f16 -> "}"
    * f17 -> "}"
    */
   public void visit(MainClass n, StringPair argu) {
      String c = n.f1.f0.toString();
      argu = new StringPair(c, "main");
      ismvar = true;
      n.f14.accept(this, argu);
      ismvar = false;
    }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public void visit(ClassDeclaration n, StringPair argu) {
      String c = n.f1.f0.toString();
      StringPair sp = new StringPair(c, "");
      n.f3.accept(this, sp);
      ismvar = true;
      n.f4.accept(this, sp);
      ismvar = false;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public void visit(ClassExtendsDeclaration n, StringPair argu) {
      String c = n.f1.f0.toString();
      String superC = n.f3.f0.toString();
      cha.putClassHierarchyPair(c, superC);
      StringPair sp = new StringPair(c, "");
      n.f5.accept(this, sp);
      ismvar = true;
      n.f6.accept(this, sp);
      ismvar = false;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public void visit(VarDeclaration n, StringPair argu) {
      shouldAdd = false;
      n.f0.accept(this, argu);
      String iden = n.f1.f0.toString();

      if (shouldAdd) {
        if (ismvar){
          Set<String> variables = methodVariables.getOrDefault(argu, new HashSet<String>());
          variables.add(iden);
          cha.addMethodVarTyping(argu, iden, tInfo);
          methodVariables.put(argu, variables);
        }
        else {
          Set<String> fields = classFields.getOrDefault(argu.first, new HashSet<String>());
          fields.add(iden);
          cha.addFieldVarTyping(argu.first, iden, tInfo);
          classFields.put(argu.first, fields);
        }
      }
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public void visit(FormalParameter n, StringPair argu) {
      shouldAdd = false;
      n.f0.accept(this, argu);

      if (shouldAdd) {
        String iden = n.f1.f0.toString();
        cha.addMethodVarTyping(argu, iden, tInfo);
        curMArgs.add(iden);
      }
    }

   public void visit(Identifier n, StringPair argu) {
      shouldAdd = true;
      tInfo = n.f0.toString();
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public void visit(MethodDeclaration n, StringPair argu) {
      String methodName = n.f2.f0.toString();
      StringPair p = new StringPair(argu.first, methodName);

      shouldAdd = false;
      n.f1.accept(this, argu);
      if (shouldAdd) {
        cha.addFunTyping(p, tInfo);
      }


      cha.putClassMethod(p.first, methodName);
      n.f7.accept(this, p);

      // Need to do something else for this since we want the in to be populated
      curMArgs = new ArrayList<String>();
      n.f4.accept(this, p);
      methodArguments.put(p, curMArgs);
   }
}
