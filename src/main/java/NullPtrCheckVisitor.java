//
// Generated by JTB 1.3.2
//

import syntaxtree.*;
import visitor.*;
import java.util.*;

public class NullPtrCheckVisitor extends GJDepthFirst<Context, Context> {

   private ClassHierarchyAnalysis cha;
   private NullPtrAnalysis npa;

   public NullPtrCheckVisitor(ClassHierarchyAnalysis cha, NullPtrAnalysis npa) {
      this.cha = cha;
      this.npa = npa;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> ( VarDeclaration() )*
    * f15 -> ( Statement() )*
    * f16 -> "}"
    * f17 -> "}"
    */
   public Context visit(MainClass n, Context argu) {
      String c = n.f1.f0.toString();
      argu.cname = c;
      argu.mname = "main";
      argu.eval = null;
      npa.freshMethodRecordStore(argu.getSP());

      n.f15.accept(this, argu);

      npa.flushMethodRecordStore(argu.getSP());
      return null; 
    }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public Context visit(ClassDeclaration n, Context argu) {
      String c = n.f1.f0.toString();
      argu.cname = c;
      n.f4.accept(this, argu);
      return null;
    }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public Context visit(ClassExtendsDeclaration n, Context argu) {
      String c = n.f1.f0.toString();
      argu.cname = c;
      n.f6.accept(this, argu);
   		return null; 
 		}

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public Context visit(MethodDeclaration n, Context argu) {
      String m = n.f2.f0.toString();
      argu.mname = m;
      argu.eval = null;

      npa.freshMethodRecordStore(argu.getSP());
      
      n.f8.accept(this, argu);

      // Here, the eval of this needs to be commited as the out of this function
      argu.eval = null;
      n.f10.accept(this, argu);

      npa.flushMethodRecordStore(argu.getSP());
   	  return null; 
 	}


   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public Context visit(Type n, Context argu) {
   		return n.f0.accept(this, argu); 
 	}

       /**
    * f0 -> <IDENTIFIER>
    */
   public Context visit(Identifier n, Context argu) {
      Record iden = argu.getRecord(n.f0.toString());
      if (iden != null) {
        argu.eval = iden.getLatticeElement();
        argu.expType.add(argu.getVariableType(n.f0.toString()));
        argu.prevRecord = iden;
      }
      return argu; 
    }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public Context visit(Statement n, Context argu) {
      argu.eval = null;
      argu.expType = new HashSet<String>();
      n.f0.accept(this, argu);
   		return null; 
 	}

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public Context visit(Block n, Context argu) {
      n.f1.accept(this, argu);
   		return null; 
 	}

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public Context visit(AssignmentStatement n, Context argu) {
      String iden = n.f0.f0.toString();
      n.f2.accept(this, argu);

      if (argu.eval != null) {
        NullALatticeElement e = argu.eval;
        argu.commitRecord(iden, e, n);
      }

   	  return argu; 
 	}

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public Context visit(ArrayAssignmentStatement n, Context argu) {
      n.f2.accept(this, argu);
      n.f5.accept(this, argu);
   	  return null; 
 	}

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public Context visit(IfStatement n, Context argu) {
      n.f2.accept(this, argu);

      Context c1 = new Context(argu);
      Context c2 = new Context(argu);
      n.f4.accept(this, c1);
      n.f6.accept(this, c2);

      argu.commitRecords(c1.branchRecords);
      argu.commitRecords(c2.branchRecords);

      List<Record> lr = argu.leastUpperBound(c1.branchRecords, c2.branchRecords);
      argu.commitRecords(lr);

   		return null; 
 		}

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public Context visit(WhileStatement n, Context argu) {
      n.f2.accept(this, argu);

      // creates a branching context
      Context c1 = new Context(argu);
      n.f4.accept(this, c1);
      argu.commitRecords(argu.leastUpperBound(c1.branchRecords));

   		return null; 
 	}

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public Context visit(PrintStatement n, Context argu) {
      n.f2.accept(this, argu);
   		return null; 
 	}

   /**
    * f0 -> AndExpression()
    *       | CompareExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public Context visit(Expression n, Context argu) {
   		return n.f0.accept(this, argu); 
 	}

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public Context visit(AndExpression n, Context argu) {
      n.f0.accept(this, argu);
      n.f2.accept(this, argu);
   		return null; 
 		}

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<"
    * f2 -> PrimaryExpression()
    */
   public Context visit(CompareExpression n, Context argu) {
      n.f0.accept(this, argu);
      n.f2.accept(this, argu);
   		return null; 
 		}

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public Context visit(PlusExpression n, Context argu) {
      n.f0.accept(this, argu);
      n.f2.accept(this, argu);
   		return null; 
 		}

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public Context visit(MinusExpression n, Context argu) {
      n.f0.accept(this, argu);
      n.f2.accept(this, argu);
   		return null; 
 		}

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public Context visit(TimesExpression n, Context argu) {
      n.f0.accept(this, argu);
      n.f2.accept(this, argu);
   		return null; 
 		}

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public Context visit(ArrayLookup n, Context argu) {
      n.f0.accept(this, argu);
      n.f2.accept(this, argu);
   		return null; 
 		}

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public Context visit(ArrayLength n, Context argu) {
      n.f0.accept(this, argu);
   		return null; 
 		}

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public Context visit(MessageSend n, Context argu) {
      List<NullALatticeElement> prevArgEvals = argu.argEvals;
      argu.argEvals = new ArrayList<NullALatticeElement>();

      String mname = n.f2.f0.toString();
      Set<String> prevExpType = argu.expType;
      argu.expType = new HashSet<String>();
      n.f0.accept(this, argu);

      if (argu.eval.equals(NullALatticeElement.getDontKnow())){
        System.out.print("null pointer error");
        System.exit(0);
      } /*
      else {
        System.out.println(argu.cname + " " + argu.mname);
        System.out.println(mname);
        System.out.println("prevRecord: " + argu.prevRecord + "\n");
      } */

      // Get the CHA(m) in order to get the correct class fields
      Set<String> ts = argu.expType;
      Set<String> cs = new HashSet<String>();
      for (String s: ts) {
        cs.addAll(cha.getClassesWithMethod(s, mname));
      }
      argu.expType = prevExpType;

      argu.commitRecords(npa.refreshClassFields(argu.getSP()));


      // Commit the least upper bound of all method calls
      List<Record> curRecs = null;
      for (String cname : cs) {
        List<Record> thisCMRec = npa.getMethodCallRecords(new StringPair(cname, mname));
        if (curRecs == null) {
          curRecs = thisCMRec;
        }
        else {
          curRecs = argu.leastUpperBound(thisCMRec, curRecs);
        }
      }
      if (curRecs != null) {
        argu.commitRecords(curRecs);
      }


      // Commit the arguments to the current arguments array of the npa
      n.f4.accept(this, argu);
      npa.addMethodCallArgs(cs, mname, argu.argEvals);


      // Get the least upper bound of the potential return types of this function
      NullALatticeElement e = null;
      StringPair cmPair = new StringPair("", mname);
      // System.out.println("method " + mname + " " + cs);
      for (String cname : cs) {
        cmPair.first = cname;
        NullALatticeElement curE = npa.getRet(cmPair);
        if (e == null) {
          e = curE;
        }
        else {
          e = NullALatticeElement.leastUpperBound(e, curE);
        }
      }
      argu.eval = e;

      // restore prevArgEvals in case we are in a method call
      argu.argEvals = prevArgEvals;
   		return argu;
 		}

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public Context visit(ExpressionList n, Context argu) {
      n.f0.accept(this, argu);
      if (argu.eval != null) {
        argu.argEvals.add(argu.eval);
      }
   		return null; 
 		}

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public Context visit(ExpressionRest n, Context argu) {
      n.f1.accept(this, argu);
      if (argu.eval != null) {
        argu.argEvals.add(argu.eval);
      }
   		return null; 
 		}

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public Context visit(PrimaryExpression n, Context argu) {
   		return n.f0.accept(this, argu);
 		}

   public Context visit(ThisExpression n, Context argu) {
      argu.eval = NullALatticeElement.getNotNull();
      argu.expType.add(argu.cname);
      return argu;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public Context visit(AllocationExpression n, Context argu) {
      argu.eval = NullALatticeElement.getNotNull(); 
      argu.expType.add(n.f1.f0.toString());
   		return argu;
 	}

       /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public Context visit(ArrayAllocationExpression n, Context argu) {
      n.f3.accept(this, argu);
      return argu;
   }

      /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public Context visit(BracketExpression n, Context argu) {
      return n.f1.accept(this, argu);
   }

      /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public Context visit(NotExpression n, Context argu) {
      n.f1.accept(this, argu);
      return argu;
   }

}
